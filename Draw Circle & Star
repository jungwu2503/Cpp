
// DrawStarView.cpp : CDrawStarView 클래스의 구현
//

#include "stdafx.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "DrawStar.h"
#endif

#include <math.h>
#include "DrawStarDoc.h"
#include "DrawStarView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CDrawStarView

IMPLEMENT_DYNCREATE(CDrawStarView, CView)

BEGIN_MESSAGE_MAP(CDrawStarView, CView)
	// 표준 인쇄 명령입니다.
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &CView::OnFilePrintPreview)
END_MESSAGE_MAP()

// CDrawStarView 생성/소멸

CDrawStarView::CDrawStarView()
{
	// TODO: 여기에 생성 코드를 추가합니다.

}

CDrawStarView::~CDrawStarView()
{
}

BOOL CDrawStarView::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// CDrawStarView 그리기
/*void drawCircle(CDC* pDC, int x, int y, int width, int height)
{
	int cx = x + width/2;
	int cy = y + height/2;
	int r = width/2;
	double delta = 2 * 3.141592/1000;

	double theta = 0.0;
	for (int i = 0; i < 1000; i++) {
		int px = cx + r * cos(theta);
		int py = cy + r * sin(theta);

		pDC->SetPixel(px,py,RGB(255,0,0));
		theta = theta + delta;
	}
}*/

//void makeStarPolygon(int ptX[], int ptY[], int x, int y, int width, int height) {
//}

#define PI		(3.141592)

void drawCircle(CDC* pDC, int x, int y, int width, int height)
{
	int cx = x + width/2;
	int cy = y + height/2;
	double r1 = width/2;
	double r2 = height/2;
	double r = r1;
	double delta = PI/2./10;

	double theta = 0.0;
	for (int i = 0; i < 40; i++) {
		if (theta >= 0 && theta <= PI/2.0) {
			r = r1 * (1.0 - 0.1 * i) + r2 * 0.1 * i;
		} else if (theta > PI/2.0 && theta <= PI) {
			r = r2 * (1.0 - 0.1 * (i-10)) + r1 * 0.1 * (i-10);
		} else if (theta > PI && theta <= PI*3.0/2.0) {
			r = r1 * (1.0 - 0.1 * (i-20)) + r2 * 0.1 * (i-20);
		} else {
			r = r2 * (1.0 - 0.1 * (i-30)) + r1 * 0.1 * (i-30);
		}
		int px = cx + r * cos(theta);
		int py = cy + r * sin(theta);

		pDC->Ellipse(px,py,px+5,py+5);
		theta = theta + delta;
	}
}

/*void drawCircle(CDC* pDC, int x, int y, int width, int height)
{
	int cx = x + width/2;
	int cy = y + height/2;
	double r = width/2;
	int N = 1000;
	double delta = 2*PI/N;
	double rate = 0.05;

	double theta = 0.0;

	for (int i = 0; i < N*5; i++) {
		//r = r + rate;

		if (i % 20 == 0) {
			int no = rand();

			if (no % 2 == 0) cx = cx + 1;
			else cy = cy + 1;
		}

		int px = cx + r * cos(2*theta-PI/2);
		int py = cy + r * sin(100*theta-PI/2);

		//pDC->SetPixel(px,py,RGB(255,0,0));
		pDC->Ellipse(px,py,px+5,py+5);
		theta = theta + delta;
		//Sleep(5);
	}
}*/

/*
void drawStar(CDC* pDC, int x, int y, int width, int height)
{
	int cx = x + width/2;
	int cy = y + height/2;
	int r1 = width/2;
	int r2 = 0.3819660113*r1;
	double delta = 2 * PI/5;
	POINT pt[12];
	int pos = 0;

	double theta = 0.0;
//	int oldX1 = cx + r1 * cos(-PI/2);
//	int oldY1 = cy + r1 * sin(-PI/2);
//	int oldX2 = cx + r2 * cos(PI/2);
//	int oldY2 = cy + r2 * sin(PI/2);

	for (int i = 0; i < 6; i++) {
		int px1 = cx + r1 * cos(theta-PI/2);
		int py1 = cy + r1 * sin(theta-PI/2);
		pt[pos].x = px1;
		pt[pos].y = py1;
		pos++;
		int px2 = cx + r2 * cos(theta+PI/2+3*2*PI/5);
		int py2 = cy + r2 * sin(theta+PI/2+3*2*PI/5);
		pt[pos].x = px2;
		pt[pos].y = py2;
		pos++;

		//pDC->MoveTo(oldX1, oldY1);
		//pDC->LineTo(px1, py1);
		//pDC->MoveTo(oldX2, oldY2);
		//pDC->LineTo(px2, py2);

		//oldX1 = px1;
		//oldY1 = py1;
		//oldX2 = px2;
		//oldY2 = py2;

		//pDC->SetPixel(px,py,RGB(255,0,0));
		theta = theta + delta;
	}
	pDC->Polygon(pt,10);
}*/

void CDrawStarView::OnDraw(CDC* pDC)
{
	CDrawStarDoc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	drawCircle(pDC, 300, 300, 300, 200);
	//drawStar(pDC, 100, 100, 200, 200);
	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
}


// CDrawStarView 인쇄

BOOL CDrawStarView::OnPreparePrinting(CPrintInfo* pInfo)
{
	// 기본적인 준비
	return DoPreparePrinting(pInfo);
}

void CDrawStarView::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void CDrawStarView::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: 인쇄 후 정리 작업을 추가합니다.
}


// CDrawStarView 진단

#ifdef _DEBUG
void CDrawStarView::AssertValid() const
{
	CView::AssertValid();
}

void CDrawStarView::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CDrawStarDoc* CDrawStarView::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CDrawStarDoc)));
	return (CDrawStarDoc*)m_pDocument;
}
#endif //_DEBUG


// CDrawStarView 메시지 처리기
